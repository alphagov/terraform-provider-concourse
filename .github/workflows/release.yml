name: release
on:
  push:
    tags:
      - 'v*.*'
      - 'release-test-*'

jobs:

  test:  # this is cloned from ci.yml until github actions support job reuse
    if: ${{ github.repository_owner == 'terraform-provider-concourse' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        concourse-version:
          - "6.5.1"
          - "6.7.0"
          - "7.0.0"
          - "7.8.2"
    steps:
      - name: setup
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      - name: checkout
        uses: actions/checkout@v1

      - name: unit-tests
        run: make unit-tests

      - name: ensure-containers-exist
        env:
          CONCOURSE_VERSION: ${{ matrix.concourse-version }}
        run: |
          docker-compose up -d && docker-compose down

      - name: integration-tests
        run: |
          sudo make integration-tests-prep-keys
          make integration-tests

  get-tag-name:
    runs-on: ubuntu-latest
    steps:
      - id: get-tag-name-step
        run: |
          export TAG_NAME="${GITHUB_REF/refs\/tags\//}"
          export RAW_VERSION="${TAG_NAME##v}"
          echo "::set-output name=tag_name::${TAG_NAME}"
          echo "::set-output name=raw_version::${RAW_VERSION}"
    outputs:
      tag_name: ${{ steps.get-tag-name-step.outputs.tag_name }}
      raw_version: ${{ steps.get-tag-name-step.outputs.raw_version }}

  build:
    runs-on: ubuntu-latest
    needs: [ "test", "get-tag-name" ]
    strategy:
      matrix:
        goos: [ "linux", "darwin" ]
        goarch: [ "amd64", "arm64" ]
    steps:
      - name: setup
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      - name: checkout
        uses: actions/checkout@v1

      - name: compile
        id: compile
        env:
          BINARY_NAME: terraform-provider-concourse_${{ needs.get-tag-name.outputs.raw_version }}
          ZIP_NAME: terraform-provider-concourse_${{ needs.get-tag-name.outputs.raw_version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
        run: |
          GOOS="${{ matrix.goos }}" GOARCH="${{ matrix.goarch }}" make
          mv terraform-provider-concourse $BINARY_NAME
          zip $ZIP_NAME $BINARY_NAME
          echo "::set-output name=zip_name::$ZIP_NAME"

      - id: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.compile.outputs.zip_name }}
          path: ./${{ steps.compile.outputs.zip_name }}

  sign:
    runs-on: ubuntu-latest
    needs: [ "build", "get-tag-name" ]
    steps:
      - name: import-gpg-key
        id: import-gpg-key
        uses: paultyng/ghaction-import-gpg@53deb67fe3b05af114ad9488a4da7b782455d588  # v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_SECRET_KEY }}
          PASSPHRASE: ${{ secrets.GPG_SECRET_KEY_PASSPHRASE }}
      - name: download-artifacts
        id: download-artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts/
      - name: gather-hash-sign
        id: gather-hash-sign
        env:
          HASH_FILE_NAME: terraform-provider-concourse_${{ needs.get-tag-name.outputs.raw_version }}_SHA256SUMS
        run: |
          mkdir gathered
          cp artifacts/*.zip/*.zip gathered/
          pushd gathered
          sha256sum *.zip > $HASH_FILE_NAME
          gpg --batch --local-user 95B055A2D6FF56B5D8A57849BDD24EEBEE0F9AE8 --detach-sign $HASH_FILE_NAME
          popd
          find gathered/ -type f -printf '%f\n' | jq --raw-input -c --slurp '.[:-1] | split("\n")' > all_artifacts.json
          echo "::set-output name=hash_file_name::$HASH_FILE_NAME"
          echo -n "::set-output name=all_artifacts_json::"
          cat all_artifacts.json
      - name: upload-hash-file-artifact
        id: upload-hash-file-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.gather-hash-sign.outputs.hash_file_name }}
          path: ./gathered/${{ steps.gather-hash-sign.outputs.hash_file_name }}
      - name: upload-signature-artifact
        id: upload-signature-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.gather-hash-sign.outputs.hash_file_name }}.sig
          path: ./gathered/${{ steps.gather-hash-sign.outputs.hash_file_name }}.sig
    outputs:
      all_artifacts_json: ${{ steps.gather-hash-sign.outputs.all_artifacts_json }}

  create-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: create-release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
    outputs:
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}

  upload-release-assets:
    runs-on: ubuntu-latest
    needs: [ "create-release", "sign" ]
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.sign.outputs.all_artifacts_json) }}
    steps:
      - name: download-artifact
        id: download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}

      - name: determine-content-type
        id: determine-content-type
        env:
          ARTIFACT_NAME: ${{ matrix.artifact }}
        run: |
          echo -n '::set-output name=content_type::'
          if [[ ${ARTIFACT_NAME##*.} = 'zip' ]] ; then
            echo 'application/zip'
          elif [[ ${ARTIFACT_NAME##*.} = 'sig' ]] ; then
            echo 'application/pgp-signature'
          else
            echo 'text/plain'
          fi
          
      - name: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ./${{ matrix.artifact }}
          asset_name: ${{ matrix.artifact }}
          asset_content_type: ${{ steps.determine-content-type.outputs.content_type }}
